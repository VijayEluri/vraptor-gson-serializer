h2. ABOUT

VRaptor uses Xstream to serialize JSON from controllers, we don't like Xstream.

h2. INSTALATION

<pre>
<code>git clone git://github.com/luizsignorelli/vraptor-gson-serializer.git
cd vraptor-gson-serializer 
mvn install</code>
</pre>


h2. CONFIGURATION

1. Add the dependency to your project
2. Add this to your web.xml:

<pre>
<code>
<context-param>
   <param-name>br.com.caelum.vraptor.packages</param-name>
   <param-value> br.com.caelum.vraptor.serialization.gson</param-value>
</context-param>
</code>
</pre>

h2. CHANGES

h3. 0.5.0

We've added a JsonInterceptor and a @Json annotation, so now you can do this:
<pre>
<code>

@Resource
public class CustomerController {

    private final Customers customers;

    public CustomerController(Customers customers) {
        this.customers = customers;
    }

    *@Json* @Get("/customer/byName")
    public List<Customer> findByName(String name){
        return Arrays.asList(customers.findByName(name));
    }
}
</pre>
</code>

The annotation marks the method to be intercepted, and it will just use the result.use(json()) to serialize the return of the method.

You can exclude som fields too:
<pre>
<code>

@Resource
public class CustomerController {

    private final Customers customers;

    public CustomerController(Customers customers) {
        this.customers = customers;
    }

    *@Json(exclude = {"address, age"})* @Get("/customer/byName")
    public List<Customer> findByName(String name){
        return Arrays.asList(customers.findByName(name));
    }
}
</pre>
</code>

h3. 0.0.2

We've implemented the exclude funcionality. It works just like the XstreamSerializer.